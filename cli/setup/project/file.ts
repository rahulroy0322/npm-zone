const pkg = (name: string) => ({
  name,
  version: "0.0.0",
  scripts: {
    build: "tsc -b",
    dev: "tsx --watch src/main.ts",
    formate: "prettier ./{src,tests}/**/* --check",
    "formate:fix": "prettier ./{src,tests}/**/* -w",
    lint: "eslint ./src",
    "lint:fix": "eslint --fix ./src",
    start: "node dist/main.js",
  },
  devDependencies: {
    "@eslint/js": "^9.23.0",
    "@trivago/prettier-plugin-sort-imports": "5.2.2",
    "@types/node": "^24.0.1",
    eslint: "^9.23.0",
    "eslint-config-prettier": "10.1.1",
    globals: "^16.0.0",
    prettier: "3.5.3",
    tsx: "^4.20.3",
    typescript: "^5.8.3",
    "typescript-eslint": "^8.28.0",
  },
});

const tsconfig = {
  compilerOptions: {
    target: "ES6",
    module: "commonjs",
    rootDir: "./src",
    resolveJsonModule: true,
    declaration: true,
    sourceMap: true,
    outDir: "./dist",
    removeComments: true,
    noEmitOnError: true,
    isolatedModules: true,
    esModuleInterop: true,
    forceConsistentCasingInFileNames: true,

    strict: true,
    noImplicitAny: true,
    strictNullChecks: true,
    noImplicitThis: true,
    useUnknownInCatchVariables: true,
    noImplicitReturns: true,
    noUncheckedIndexedAccess: true,
    noImplicitOverride: true,
    skipLibCheck: true,
  },
  include: ["src/**/*.ts"],
  exclude: ["node_modules", "dist"],
};

const readme = (name: string) => `# ${name}`;
const gitIgnore = `# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

# lock files
*lock*

# output files
lib
dist
build
bin

# extra files
pnpm*
yarn*
.vscode*
`;
const prettierIgnore = `# Ignore artifacts:
build
coverage

node_modules
*lock*
package.json
*.ico
.prettier*
*ignore*
.husky

lib
dist
build
bin

*.ejs
`;
const prettier = (type: "ts" | "js" = "ts") => ({
  singleQuote: true,
  arrowParens: "always",
  bracketSpacing: true,
  semi: true,
  trailingComma: "es5",
  singleAttributePerLine: true,
  importOrder: [
    "node$",
    "^(node:$)|^(node$)",
    "^react",
    "^next",
    "^[a-zA-Z]",
    "^@(.*)$",
    "^&(.*)$",
    "^%(.*)$",
    "^\\$(.*)$",
    "^#(.*)$",
    "<THIRD_PARTY_MODULES>",
  ],
  importOrderSeparation: true,
  importOrderSortSpecifiers: true,
  ...(type === "ts" ? { parser: "typescript" } : {}),
  filepath: "./src/*",
  plugins: ["@trivago/prettier-plugin-sort-imports"],
  overrides: [
    {
      files: ["**/*.json"],
      options: {
        parser: "json",
      },
    },
    {
      files: ["**/*.html"],
      options: {
        parser: "html",
      },
    },
    {
      files: ["**/*.css"],
      options: {
        parser: "css",
      },
    },
    {
      files: ["**/*.md"],
      options: {
        parser: "markdown",
      },
    },
  ],
});

export { pkg, tsconfig, readme, gitIgnore, prettier, prettierIgnore };
